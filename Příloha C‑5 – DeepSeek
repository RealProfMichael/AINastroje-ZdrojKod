import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import javax.imageio.ImageIO;
import javax.swing.filechooser.FileNameExtensionFilter;

public class PaintApplication {
    private JFrame frame;
    private DrawingPanel drawingPanel;
    private JToolBar toolBar;
    private ShapeType currentShape = ShapeType.LINE;
    private Color currentColor = Color.BLACK;
    private int strokeSize = 2;

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            new PaintApplication().createAndShowGUI();
        });
    }

    private void createAndShowGUI() {
        frame = new JFrame("Java Paint-like Application");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(800, 600);
        frame.setLayout(new BorderLayout());

        createToolBar();
        drawingPanel = new DrawingPanel();

        frame.add(toolBar, BorderLayout.NORTH);
        frame.add(drawingPanel, BorderLayout.CENTER);

        frame.setVisible(true);
    }

    private void createToolBar() {
        toolBar = new JToolBar();
        toolBar.setFloatable(false);

        String[] shapes = {"Line", "Rectangle", "Oval", "Freehand"};
        JComboBox<String> shapeCombo = new JComboBox<>(shapes);
        shapeCombo.addActionListener(e -> {
            currentShape = ShapeType.values()[shapeCombo.getSelectedIndex()];
        });

        JButton colorButton = new JButton("Color");
        colorButton.addActionListener(e -> {
            currentColor = JColorChooser.showDialog(frame, "Choose Color", currentColor);
        });

        String[] sizes = {"1", "2", "3", "5", "8", "10"};
        JComboBox<String> sizeCombo = new JComboBox<>(sizes);
        sizeCombo.setSelectedIndex(1);
        sizeCombo.addActionListener(e -> {
            strokeSize = Integer.parseInt((String) sizeCombo.getSelectedItem());
        });

        JButton saveButton = new JButton("Save");
        saveButton.addActionListener(e -> saveDrawing());

        JButton resetButton = new JButton("Reset");
        resetButton.addActionListener(e -> drawingPanel.reset());

        toolBar.add(shapeCombo);
        toolBar.add(colorButton);
        toolBar.add(new JLabel(" Size: "));
        toolBar.add(sizeCombo);
        toolBar.addSeparator();
        toolBar.add(saveButton);
        toolBar.add(resetButton);
    }

    private void saveDrawing() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Save Drawing");
        fileChooser.setFileFilter(new FileNameExtensionFilter("PNG Images", "png"));
        
        if (fileChooser.showSaveDialog(frame) == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            if (!file.getName().toLowerCase().endsWith(".png")) {
                file = new File(file.getParentFile(), file.getName() + ".png");
            }
            
            try {
                BufferedImage image = new BufferedImage(
                    drawingPanel.getWidth(), 
                    drawingPanel.getHeight(), 
                    BufferedImage.TYPE_INT_RGB);
                Graphics2D g2 = image.createGraphics();
                drawingPanel.paint(g2);
                g2.dispose();
                ImageIO.write(image, "png", file);
                JOptionPane.showMessageDialog(frame, "Drawing saved successfully!");
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(frame, "Error saving drawing: " + ex.getMessage(), 
                    "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    enum ShapeType {
        LINE, RECTANGLE, OVAL, FREEHAND
    }

    class DrawingPanel extends JPanel {
        private List<Shape> shapes = new ArrayList<>();
        private Shape currentDrawing;
        private Point startPoint;

        public DrawingPanel() {
            setBackground(Color.WHITE);
            setPreferredSize(new Dimension(800, 500));

            addMouseListener(new MouseAdapter() {
                @Override
                public void mousePressed(MouseEvent e) {
                    startPoint = e.getPoint();
                    switch (currentShape) {
                        case LINE:
                            currentDrawing = new Line(startPoint, startPoint, currentColor, strokeSize);
                            break;
                        case RECTANGLE:
                            currentDrawing = new Rectangle(startPoint, startPoint, currentColor, strokeSize, false);
                            break;
                        case OVAL:
                            currentDrawing = new Oval(startPoint, startPoint, currentColor, strokeSize, false);
                            break;
                        case FREEHAND:
                            currentDrawing = new Freehand(currentColor, strokeSize);
                            ((Freehand) currentDrawing).addPoint(e.getPoint());
                            break;
                    }
                }

                @Override
                public void mouseReleased(MouseEvent e) {
                    if (currentDrawing != null) {
                        shapes.add(currentDrawing);
                        currentDrawing = null;
                        repaint();
                    }
                }
            });

            addMouseMotionListener(new MouseMotionAdapter() {
                @Override
                public void mouseDragged(MouseEvent e) {
                    if (currentDrawing != null) {
                        switch (currentShape) {
                            case LINE:
                                ((Line) currentDrawing).setEndPoint(e.getPoint());
                                break;
                            case RECTANGLE:
                                ((Rectangle) currentDrawing).setEndPoint(e.getPoint());
                                break;
                            case OVAL:
                                ((Oval) currentDrawing).setEndPoint(e.getPoint());
                                break;
                            case FREEHAND:
                                ((Freehand) currentDrawing).addPoint(e.getPoint());
                                break;
                        }
                        repaint();
                    }
                }
            });
        }

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            Graphics2D g2 = (Graphics2D) g;
            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

            for (Shape shape : shapes) {
                shape.draw(g2);
            }
            if (currentDrawing != null) {
                currentDrawing.draw(g2);
            }
        }

        public void reset() {
            shapes.clear();
            repaint();
        }
    }
}


import java.awt.*;

abstract class Shape {
    protected Color color;
    protected int strokeSize;

    public Shape(Color color, int strokeSize) {
        this.color = color;
        this.strokeSize = strokeSize;
    }

    public abstract void draw(Graphics2D g);
}

class Line extends Shape {
    private Point start;
    private Point end;

    public Line(Point start, Point end, Color color, int strokeSize) {
        super(color, strokeSize);
        this.start = start;
        this.end = end;
    }

    public void setEndPoint(Point end) {
        this.end = end;
    }

    @Override
    public void draw(Graphics2D g) {
        g.setColor(color);
        g.setStroke(new BasicStroke(strokeSize));
        g.drawLine(start.x, start.y, end.x, end.y);
    }
}

class Rectangle extends Shape {
    private Point start;
    private Point end;
    private boolean filled;

    public Rectangle(Point start, Point end, Color color, int strokeSize, boolean filled) {
        super(color, strokeSize);
        this.start = start;
        this.end = end;
        this.filled = filled;
    }

    public void setEndPoint(Point end) {
        this.end = end;
    }

    @Override
    public void draw(Graphics2D g) {
        g.setColor(color);
        g.setStroke(new BasicStroke(strokeSize));
        
        int x = Math.min(start.x, end.x);
        int y = Math.min(start.y, end.y);
        int width = Math.abs(start.x - end.x);
        int height = Math.abs(start.y - end.y);
        
        if (filled) {
            g.fillRect(x, y, width, height);
        } else {
            g.drawRect(x, y, width, height);
        }
    }
}

class Oval extends Shape {
    private Point start;
    private Point end;
    private boolean filled;

    public Oval(Point start, Point end, Color color, int strokeSize, boolean filled) {
        super(color, strokeSize);
        this.start = start;
        this.end = end;
        this.filled = filled;
    }

    public void setEndPoint(Point end) {
        this.end = end;
    }

    @Override
    public void draw(Graphics2D g) {
        g.setColor(color);
        g.setStroke(new BasicStroke(strokeSize));
        
        int x = Math.min(start.x, end.x);
        int y = Math.min(start.y, end.y);
        int width = Math.abs(start.x - end.x);
        int height = Math.abs(start.y - end.y);
        
        if (filled) {
            g.fillOval(x, y, width, height);
        } else {
            g.drawOval(x, y, width, height);
        }
    }
}

class Freehand extends Shape {
    private java.util.List<Point> points = new ArrayList<>();

    public Freehand(Color color, int strokeSize) {
        super(color, strokeSize);
    }

    public void addPoint(Point point) {
        points.add(point);
    }

    @Override
    public void draw(Graphics2D g) {
        if (points.size() < 2) return;
        
        g.setColor(color);
        g.setStroke(new BasicStroke(strokeSize));
        
        Point prev = points.get(0);
        for (int i = 1; i < points.size(); i++) {
            Point current = points.get(i);
            g.drawLine(prev.x, prev.y, current.x, current.y);
            prev = current;
        }
    }
}


import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.File;

public class PaintApplicationTest {
    public static void main(String[] args) {
        // Test application startup
        System.out.println("Starting Paint Application...");
        PaintApplication.main(args);
        
        // Manual testing instructions
        System.out.println("\nManual Test Instructions:");
        System.out.println("1. Draw shapes using different tools");
        System.out.println("2. Try changing colors and stroke sizes");
        System.out.println("3. Click 'Save' to save your drawing (verify file is created)");
        System.out.println("4. Click 'Reset' to clear the canvas");
        System.out.println("5. Verify all functionality works as expected");
    }
}
